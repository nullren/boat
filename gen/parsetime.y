%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2016-03-13 12:12:47.321986355 -0700 PDT
//
//  $ ../go/bin/ebnf2y -pkg gen -start Parsetime parsetime.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package gen //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	AM
%token	APR
%token	AUG
%token	DAY
%token	DEC
%token	FEB
%token	FRI
%token	HOUR
%token	INT1DIGIT
%token	JAN
%token	JUL
%token	JUN
%token	MAR
%token	MAY
%token	MIDNIGHT
%token	MINUTE
%token	MON
%token	MONTH
%token	NEXT
%token	NOON
%token	NOV
%token	NOW
%token	OCT
%token	PM
%token	SAT
%token	SEP
%token	SUN
%token	TEATIME
%token	THU
%token	TODAY
%token	TOMORROW
%token	TUE
%token	UTC
%token	WED
%token	WEEK
%token	YEAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	AM
	APR
	AUG
	DAY
	DEC
	FEB
	FRI
	HOUR
	INT1DIGIT
	JAN
	JUL
	JUN
	MAR
	MAY
	MIDNIGHT
	MINUTE
	MON
	MONTH
	NEXT
	NOON
	NOV
	NOW
	OCT
	PM
	SAT
	SEP
	SUN
	TEATIME
	THU
	TODAY
	TOMORROW
	TUE
	UTC
	WED
	WEEK
	YEAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	AmPm
	ConcatenatedDate
	Date
	Date1
	Date10
	Date2
	Date3
	Date4
	Date5
	Date6
	Date7
	Date8
	Date9
	DayNumber
	DayOfWeek
	Decrement
	Hr24clockHrMin
	IncDecNumber
	IncDecPeriod
	IncOrDec
	Increment
	Int
	Int1
	Int1_2digit
	Int2_or_4digit
	Int2digit
	Int3digit
	Int4digit
	Int5_8digit
	Int5_8digit1
	Integer
	MonthName
	MonthNumber
	Parsetime
	SpecBase
	SpecBase1
	Start
	Time
	Time1
	TimeBase
	TimeBase1
	TimeBase2
	TimeHour
	TimeHourMin
	TimezoneName
	YearNumber

/*TODO %left, %right, ... declarations */

%start Start

%%

AmPm:
	AM
	{
		$$ = $1 //TODO 1
	}
|	PM
	{
		$$ = $1 //TODO 2
	}

ConcatenatedDate:
	Int5_8digit
	{
		$$ = $1 //TODO 3
	}

Date:
	Date1
	{
		$$ = $1 //TODO 4
	}
|	Date2
	{
		$$ = $1 //TODO 5
	}
|	Date3
	{
		$$ = $1 //TODO 6
	}
|	DayOfWeek
	{
		$$ = $1 //TODO 7
	}
|	TODAY
	{
		$$ = $1 //TODO 8
	}
|	TOMORROW
	{
		$$ = $1 //TODO 9
	}
|	Date4
	{
		$$ = $1 //TODO 10
	}
|	Date5
	{
		$$ = $1 //TODO 11
	}
|	Date6
	{
		$$ = $1 //TODO 12
	}
|	Date7
	{
		$$ = $1 //TODO 13
	}
|	Date8
	{
		$$ = $1 //TODO 14
	}
|	ConcatenatedDate
	{
		$$ = $1 //TODO 15
	}
|	Date9
	{
		$$ = $1 //TODO 16
	}
|	Date10
	{
		$$ = $1 //TODO 17
	}

Date1:
	MonthName DayNumber
	{
		$$ = []Date1{$1, $2} //TODO 18
	}

Date10:
	NEXT DayOfWeek
	{
		$$ = []Date10{$1, $2} //TODO 19
	}

Date2:
	MonthName DayNumber YearNumber
	{
		$$ = []Date2{$1, $2, $3} //TODO 20
	}

Date3:
	MonthName DayNumber ',' YearNumber
	{
		$$ = []Date3{$1, $2, ",", $4} //TODO 21
	}

Date4:
	DayNumber MonthName
	{
		$$ = []Date4{$1, $2} //TODO 22
	}

Date5:
	DayNumber MonthName YearNumber
	{
		$$ = []Date5{$1, $2, $3} //TODO 23
	}

Date6:
	MonthNumber '/' DayNumber '/' YearNumber
	{
		$$ = []Date6{$1, "/", $3, "/", $5} //TODO 24
	}

Date7:
	MonthNumber '-' DayNumber '-' YearNumber
	{
		$$ = []Date7{$1, "-", $3, "-", $5} //TODO 25
	}

Date8:
	MonthNumber '.' DayNumber '.' YearNumber
	{
		$$ = []Date8{$1, ".", $3, ".", $5} //TODO 26
	}

Date9:
	NEXT IncDecPeriod
	{
		$$ = []Date9{$1, $2} //TODO 27
	}

DayNumber:
	Int1_2digit
	{
		$$ = $1 //TODO 28
	}

DayOfWeek:
	SUN
	{
		$$ = $1 //TODO 29
	}
|	MON
	{
		$$ = $1 //TODO 30
	}
|	TUE
	{
		$$ = $1 //TODO 31
	}
|	WED
	{
		$$ = $1 //TODO 32
	}
|	THU
	{
		$$ = $1 //TODO 33
	}
|	FRI
	{
		$$ = $1 //TODO 34
	}
|	SAT
	{
		$$ = $1 //TODO 35
	}

Decrement:
	'-' IncDecNumber IncDecPeriod
	{
		$$ = []Decrement{"-", $2, $3} //TODO 36
	}

Hr24clockHrMin:
	Int4digit
	{
		$$ = $1 //TODO 37
	}

IncDecNumber:
	Integer
	{
		$$ = $1 //TODO 38
	}

IncDecPeriod:
	MINUTE
	{
		$$ = $1 //TODO 39
	}
|	HOUR
	{
		$$ = $1 //TODO 40
	}
|	DAY
	{
		$$ = $1 //TODO 41
	}
|	WEEK
	{
		$$ = $1 //TODO 42
	}
|	MONTH
	{
		$$ = $1 //TODO 43
	}
|	YEAR
	{
		$$ = $1 //TODO 44
	}

IncOrDec:
	Increment
	{
		$$ = $1 //TODO 45
	}
|	Decrement
	{
		$$ = $1 //TODO 46
	}

Increment:
	'+' IncDecNumber IncDecPeriod
	{
		$$ = []Increment{"+", $2, $3} //TODO 47
	}

Int:
	Int1
	{
		$$ = $1 //TODO 48
	}

Int1:
	/* EMPTY */
	{
		$$ = []Int1(nil) //TODO 49
	}
|	Int1 INT1DIGIT
	{
		$$ = append($1.([]Int1), $2) //TODO 50
	}

Int1_2digit:
	INT1DIGIT
	{
		$$ = $1 //TODO 51
	}
|	Int2digit
	{
		$$ = $1 //TODO 52
	}

Int2_or_4digit:
	Int2digit
	{
		$$ = $1 //TODO 53
	}
|	Int4digit
	{
		$$ = $1 //TODO 54
	}

Int2digit:
	INT1DIGIT INT1DIGIT
	{
		$$ = []Int2digit{$1, $2} //TODO 55
	}

Int3digit:
	INT1DIGIT Int2digit
	{
		$$ = []Int3digit{$1, $2} //TODO 56
	}

Int4digit:
	Int2digit Int2digit
	{
		$$ = []Int4digit{$1, $2} //TODO 57
	}

Int5_8digit:
	Int4digit Int5_8digit1
	{
		$$ = []Int5_8digit{$1, $2} //TODO 58
	}

Int5_8digit1:
	INT1DIGIT
	{
		$$ = $1 //TODO 59
	}
|	Int2digit
	{
		$$ = $1 //TODO 60
	}
|	Int3digit
	{
		$$ = $1 //TODO 61
	}
|	Int4digit
	{
		$$ = $1 //TODO 62
	}

Integer:
	Int
	{
		$$ = $1 //TODO 63
	}
|	INT1DIGIT
	{
		$$ = $1 //TODO 64
	}
|	Int2digit
	{
		$$ = $1 //TODO 65
	}
|	Int4digit
	{
		$$ = $1 //TODO 66
	}
|	Int5_8digit
	{
		$$ = $1 //TODO 67
	}

MonthName:
	JAN
	{
		$$ = $1 //TODO 68
	}
|	FEB
	{
		$$ = $1 //TODO 69
	}
|	MAR
	{
		$$ = $1 //TODO 70
	}
|	APR
	{
		$$ = $1 //TODO 71
	}
|	MAY
	{
		$$ = $1 //TODO 72
	}
|	JUN
	{
		$$ = $1 //TODO 73
	}
|	JUL
	{
		$$ = $1 //TODO 74
	}
|	AUG
	{
		$$ = $1 //TODO 75
	}
|	SEP
	{
		$$ = $1 //TODO 76
	}
|	OCT
	{
		$$ = $1 //TODO 77
	}
|	NOV
	{
		$$ = $1 //TODO 78
	}
|	DEC
	{
		$$ = $1 //TODO 79
	}

MonthNumber:
	Int1_2digit
	{
		$$ = $1 //TODO 80
	}

Parsetime:
	SpecBase
	{
		$$ = $1 //TODO 81
	}
|	SpecBase IncOrDec
	{
		$$ = []Parsetime{$1, $2} //TODO 82
	}

SpecBase:
	Date
	{
		$$ = $1 //TODO 83
	}
|	Time
	{
		$$ = $1 //TODO 84
	}
|	SpecBase1
	{
		$$ = $1 //TODO 85
	}
|	NOW
	{
		$$ = $1 //TODO 86
	}

SpecBase1:
	Time Date
	{
		$$ = []SpecBase1{$1, $2} //TODO 87
	}

Start:
	Parsetime
	{
		_parserResult = $1 //TODO 88
	}

Time:
	TimeBase
	{
		$$ = $1 //TODO 89
	}
|	Time1
	{
		$$ = $1 //TODO 90
	}

Time1:
	TimeBase TimezoneName
	{
		$$ = []Time1{$1, $2} //TODO 91
	}

TimeBase:
	Hr24clockHrMin
	{
		$$ = $1 //TODO 92
	}
|	TimeBase1
	{
		$$ = $1 //TODO 93
	}
|	TimeHourMin
	{
		$$ = $1 //TODO 94
	}
|	TimeBase2
	{
		$$ = $1 //TODO 95
	}
|	NOON
	{
		$$ = $1 //TODO 96
	}
|	MIDNIGHT
	{
		$$ = $1 //TODO 97
	}
|	TEATIME
	{
		$$ = $1 //TODO 98
	}

TimeBase1:
	TimeHour AmPm
	{
		$$ = []TimeBase1{$1, $2} //TODO 99
	}

TimeBase2:
	TimeHourMin AmPm
	{
		$$ = []TimeBase2{$1, $2} //TODO 100
	}

TimeHour:
	Int1_2digit
	{
		$$ = $1 //TODO 101
	}

TimeHourMin:
	Int1_2digit ':' Int2digit
	{
		$$ = []TimeHourMin{$1, ":", $3} //TODO 102
	}

TimezoneName:
	UTC
	{
		$$ = $1 //TODO 103
	}

YearNumber:
	Int2_or_4digit
	{
		$$ = $1 //TODO 104
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	AmPm interface{}
	ConcatenatedDate interface{}
	Date interface{}
	Date1 interface{}
	Date10 interface{}
	Date2 interface{}
	Date3 interface{}
	Date4 interface{}
	Date5 interface{}
	Date6 interface{}
	Date7 interface{}
	Date8 interface{}
	Date9 interface{}
	DayNumber interface{}
	DayOfWeek interface{}
	Decrement interface{}
	Hr24clockHrMin interface{}
	IncDecNumber interface{}
	IncDecPeriod interface{}
	IncOrDec interface{}
	Increment interface{}
	Int interface{}
	Int1 interface{}
	Int1_2digit interface{}
	Int2_or_4digit interface{}
	Int2digit interface{}
	Int3digit interface{}
	Int4digit interface{}
	Int5_8digit interface{}
	Int5_8digit1 interface{}
	Integer interface{}
	MonthName interface{}
	MonthNumber interface{}
	Parsetime interface{}
	SpecBase interface{}
	SpecBase1 interface{}
	Start interface{}
	Time interface{}
	Time1 interface{}
	TimeBase interface{}
	TimeBase1 interface{}
	TimeBase2 interface{}
	TimeHour interface{}
	TimeHourMin interface{}
	TimezoneName interface{}
	YearNumber interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
